name: Deploy Production

on:
  push:
    branches: [main]

jobs:
  build-node-modules-lambda-layer:
    name: Build node_modules lambda layer
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      
      - name: Install only production dependencies
        run: npm ci --production

      - name: Build NodeModules lambda layer
        run: ./scripts/ci/build-node-modules-lambda-layer.sh

      - name: Upload artifact node-modules-lambda-layer
        uses: actions/upload-artifact@v3
        with:
          name: node-modules-lambda-layer
          path: ./layers/node-modules

  build-prisma-client-layer:
    name: Build prisma client lambda layer
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      
      - name: Install all dependencies
        run: npm ci

      - name: Build PrismaClient lambda layer
        run: ./scripts/ci/build-prisma-client-lambda-layer.sh

      - name: Upload artifact prisma-client-lambda-layer
        uses: actions/upload-artifact@v3
        with:
          name: prisma-client-lambda-layer
          path: ./layers/prisma-client
      
  build-libs-lambda-layer:
    name: Build shared libraries lambda layer
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      
      - name: Install all dependencies
        run: npm ci

      - name: Prepare prisma client
        run: PRISMA_BINARY_TARGET=rhel-openssl-1.0.x npx prisma generate

      - name: Build project assets
        run: npx tsc

      - name: Build Libs lambda layer
        run: ./scripts/ci/build-libs-lambda-layer.sh

      - name: Upload artifact libs-lambda-layer
        uses: actions/upload-artifact@v3
        with:
          name: libs-lambda-layer
          path: ./layers/lib

  build-lambda-functions: 
    name: Build all lambda functions
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install all dependencies
        run: npm ci

      - name: Prepare prisma client
        run: PRISMA_BINARY_TARGET=rhel-openssl-1.0.x npx prisma generate

      - name: Build project assets
        run: npx tsc

      - name: Upload artifact lambda-functions
        uses: actions/upload-artifact@v3
        with:
          name: lambda-functions
          path: ./build

  deploy:
    name: Deploy serverless
    needs: [
      build-node-modules-lambda-layer,
      build-prisma-client-layer,
      build-libs-lambda-layer,
      build-lambda-functions
    ]
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://135pvgxsdc.execute-api.us-east-1.amazonaws.com/info
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      
      - name: Download artifact lambda-functions
        uses: actions/download-artifact@v3
        with:
          name: lambda-functions
          path: ./build
      
      - name: Download artifact node-modules-lambda-layer
        uses: actions/download-artifact@v3
        with:
          name: node-modules-lambda-layer
          path: ./build/layers/node-modules
      
      - name: Download artifact prisma-client-lambda-layer
        uses: actions/download-artifact@v3
        with:
          name: prisma-client-lambda-layer
          path: ./build/layers/prisma-client

      - name: Download artifact libs-lambda-layer
        uses: actions/download-artifact@v3
        with:
          name: libs-lambda-layer
          path: ./build/layers/libs
      
      - name: Unzip lambda layers
        run: ./scripts/ci/unzip-lambda-layers.sh

      - name: Install serverless cli
        run: npm install -g serverless
      
      - name: Install required serverless plugins
        run: npm install serverless-offline
      
      - name: Move serverless config
        run: mv serverless.yml ./build/serverless.yml

      - name: Deploy to serverless
        uses: serverless/github-action@v3.1
        with:
          args: -c "cd ./build && serverless deploy --stage prod --verbose"
          entrypoint: /bin/sh
        env:
          SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}
          PRISMA_BINARY_TARGET: rhel-openssl-1.0.x