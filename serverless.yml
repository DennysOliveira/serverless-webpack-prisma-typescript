org: scraperapi
app: scraper-api
service: crawler
useDotenv: true

plugins: ${self:custom.pluginsConfig.${self:custom.stage}}

provider:
  timeout: 29
  name: aws
  runtime: nodejs16.x
  stage: 'dev'
  environment:
    JWT_SECRET: ${param:JWT_SECRET, env:JWT_SECRET, 'secret'}
    JWT_REFRESH_SECRET: ${param:JWT_REFRESH_SECRET, env:JWT_REFRESH_SECRET, 'refreshSecret'}
    DATABASE_URL: ${param:DATABASE_URL, env:DATABASE_URL, 'mysql://root@127.0.0.1:3309/scraper-api'}

custom:
  stage: ${opt:stage, self:provider.stage, 'dev'}
  handlerPrefix:
    dev: 'src/'
    prod: ''
  pluginsConfig:
    dev:
      - serverless-offline
      - serverless-plugin-typescript
    prod:
      - serverless-offline
    
layers:
  PrismaClient:
    path: layers/prisma-client
  NodeModules:
    path: layers/node-modules
  Libs:
    path: layers/libs
  
package:
  individually: true

functions:
  info:
    handler: ${self:custom.handlerPrefix.${self:custom.stage}}info.handler
    layers:
      - !Ref NodeModulesLambdaLayer
      - !Ref PrismaClientLambdaLayer
      - !Ref LibsLambdaLayer
    events:
      - httpApi:
          path: /info
          method: get
      
  createSitemap: 
    handler: ${self:custom.handlerPrefix.${self:custom.stage}}sitemap.create
    events:
      - httpApi:
          path: /sitemaps
          method: post
    layers:
      - !Ref NodeModulesLambdaLayer
      - !Ref PrismaClientLambdaLayer
      - !Ref LibsLambdaLayer

  getSitemaps: 
    handler: ${self:custom.handlerPrefix.${self:custom.stage}}sitemap.findAll    
    layers:
      - !Ref NodeModulesLambdaLayer
      - !Ref LibsLambdaLayer
      - !Ref PrismaClientLambdaLayer
    events:
      - httpApi:
          path: /sitemaps
          method: get    

  getSitemapById: 
    handler: ${self:custom.handlerPrefix.${self:custom.stage}}sitemap.findById
    events:
      - httpApi:
          path: /sitemaps/{id}
          method: get
    layers:
      - !Ref NodeModulesLambdaLayer
      - !Ref PrismaClientLambdaLayer
      - !Ref LibsLambdaLayer

  getSitemapResults:
    handler: ${self:custom.handlerPrefix.${self:custom.stage}}sitemap.getSitemapResults
    events:
      - httpApi:
          path: /sitemaps/{id}/results
          method: get
    layers:
    - !Ref NodeModulesLambdaLayer
    - !Ref PrismaClientLambdaLayer
    - !Ref LibsLambdaLayer    

  getSitemapStatus:
    handler: ${self:custom.handlerPrefix.${self:custom.stage}}sitemap.getSitemapStatus
    events:
      - httpApi:
          path: /sitemaps/{id}/status
          method: get
    layers:
      - !Ref NodeModulesLambdaLayer
      - !Ref PrismaClientLambdaLayer
      - !Ref LibsLambdaLayer

  enableSitemap:
    handler: ${self:custom.handlerPrefix.${self:custom.stage}}sitemap/enableSitemap.handler
    events:
      - httpApi:
          path: /sitemaps/{id}/enable
          method: post
    layers:
      - !Ref NodeModulesLambdaLayer
      - !Ref PrismaClientLambdaLayer
      - !Ref LibsLambdaLayer

  disableSitemap:
    handler: ${self:custom.handlerPrefix.${self:custom.stage}}sitemap/disableSitemap.handler
    events:
      - httpApi:
          path: /sitemaps/{id}/disable
          method: post
    layers:
      - !Ref NodeModulesLambdaLayer
      - !Ref PrismaClientLambdaLayer
      - !Ref LibsLambdaLayer

  updateOrCreateSelector:
    handler: ${self:custom.handlerPrefix.${self:custom.stage}}selector.updateOrCreate
    events:
      - httpApi:
          path: /sitemaps/{id}/selectors
          method: put
    layers:
      - !Ref NodeModulesLambdaLayer
      - !Ref PrismaClientLambdaLayer
      - !Ref LibsLambdaLayer
  
  sitemapRoutine:
    timeout: 900
    memorySize: 2048
    maximumEventAge: 1200
    maximumRetryAttempts: 0
    handler: ${self:custom.handlerPrefix.${self:custom.stage}}sitemap-routine.handler
    tags:
      timing: onceByHour
    layers:
      - !Ref NodeModulesLambdaLayer
      - !Ref PrismaClientLambdaLayer
      - !Ref LibsLambdaLayer
    events:
      - schedule: cron(0 0 ? * * *) # every day at 00:00